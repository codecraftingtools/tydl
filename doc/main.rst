Status
======

This project is not in a generally useful state at the moment.  It
currently consists of some proof-of-concept utility code and a simple,
but functional, example program that demonstrates the desired C++ API.
There is no code generator at this point, but you can see the desired
source specification for a couple of simple data types alongside the
C++ code that would be generated by a command-line tool.

Project Structure
=================

The project :github-repo:`Git repository <>` contains following
directory tree::
   
  ├── examples
  │   └── ex1
  │       ├── build.sh
  │       ├── generated
  │       │   ├── Child.hpp
  │       │   └── Parent.hpp
  │       └── src
  │           ├── ex1.cpp
  │           └── ex1.td
  └── include
      └── tydl
          ├── Accessor.hpp
          └── Field.hpp

The :repo:`include/tydl` directory contains shared Tydl C++ library
header files that are intended to be used only by auto-generated C++
type classes.

The :repo:`examples/ex1` directory demonstrates what an external
project that relies on Tydl might look like.  This example uses the
Tydl syntax to define data types and uses Tydl-generated C++ data type
classes in an example program (:repo:`examples/ex1/src/ex1.cpp`).

The :repo:`examples/ex1/generated` directory contains code that would
be automatically generated from the type definitions
(:repo:`examples/ex1/src/ex1.td`) if the code generator tool was
implemented.  In the end, this directory would be generated as part of
the example project's build process.

The :repo:`examples/ex1/build.sh` script contains the commands used to
build the example code.

Build Process
=============

The example code should compile and run under `Ubuntu<cc:ubuntu>`.
The only real prequisite for this is having a C++ compiler installed,
which can be accomplished using this command::

  sudo apt-get install build-essential

Once a C++ compiler is installed, the example code can be compiled and
executed like this::

  cd ~/git/tydl/examples/ex1
  ./build.sh
  ./ex1

